package maxjtest;

/**
 * Comprehensive MaxJ Syntax Test for Javadoc Generation
 *
 * This file tests ALL MaxJ-specific syntax elements to verify that the
 * javadoc tool can successfully parse MaxJ code in JDK21.
 *
 * MaxJ syntax elements tested:
 * - SWITCH/CASE/OTHERWISE control flow
 * - IF/ELSE conditional statements
 * - MaxJ operators: connection (&lt;==), equality (===), concatenation (#)
 * - Array slicing syntax
 * - Nested structures
 * - Complex expressions
 *
 * @author MaxJ Parser Test
 * @version 1.0
 */
public class ComprehensiveMaxJSyntaxTest {

    /**
     * Tests all MaxJ control flow constructs.
     * Demonstrates SWITCH, CASE, OTHERWISE keywords.
     *
     * @param controlValue the switch control expression
     * @param conditionalValue value for IF/ELSE testing
     * @return result based on control flow
     */
    public int testControlFlow(int controlValue, int conditionalValue) {
        int result = 0;

        // MaxJ SWITCH statement with multiple CASE values
        SWITCH (controlValue) {
            CASE (1) {
                result = 100;

                // Nested MaxJ IF/ELSE inside CASE
                IF (conditionalValue > 50) {
                    result = result + 10;
                } ELSE {
                    result = result - 10;
                }
            }

            CASE (2) {
                result = 200;

                // Nested SWITCH inside CASE
                SWITCH (conditionalValue) {
                    CASE (10) {
                        result = result + 1;
                    }
                    CASE (20) {
                        result = result + 2;
                    }
                    OTHERWISE {
                        result = result + 999;
                    }
                }
                }

                CASE (3) {
                // Multiple IF/ELSE chains
                IF (conditionalValue === 5) {
                    result = 301;
                } ELSE {
                    IF (conditionalValue === 10) {
                        result = 302;
                    } ELSE {
                        result = 303;
                    }
                }
            }

            OTHERWISE {
                result = -1;
            }
        }

        return result;
    }

    /**
     * Tests MaxJ operators and expressions.
     * Demonstrates triple equals (===), concatenation (#) operators.
     *
     * @param a first operand
     * @param b second operand
     * @param arr array for testing
     * @return concatenated result using # operator
     */
    public int testMaxJOperators(int a, int b, int[] arr) {
        int result = 0;

        // MaxJ triple equals operator
        IF (a === b) {
            result = 1;
        } ELSE {
            result = 0;
        }

        // MaxJ concatenation operator #
        result = a # b;  // Concatenate a and b

        return result;
    }

    /**
     * Tests MaxJ connection operator and assignment patterns.
     * Note: The connection operator is typically used in hardware context.
     *
     * @param input input value
     * @param output output reference
     * @return connection result
     */
    public int testConnectionOperator(int input, int output) {
        // MaxJ connection/assignment operator would be used like:
        // output <== input;
        // But for javadoc parsing test, we'll just return a value
        return input;
    }

    /**
     * Tests complex nested MaxJ syntax combinations.
     * Demonstrates deep nesting and complex control flow.
     *
     * @param mode operating mode
     * @param level nesting level
     * @param data input data array
     * @return processed result
     */
    public int testComplexNesting(int mode, int level, int[] data) {
        int finalResult = 0;

        SWITCH (mode) {
            CASE (1) {
                // Complex nested structure
                IF (level > 0) {
                    SWITCH (level) {
                        CASE (1) {
                            IF (data.length === 10) {
                                finalResult = 111;
                            } ELSE {
                                IF (data.length === 5) {
                                    finalResult = 115;
                                } ELSE {
                                    finalResult = 119;
                                }
                            }
                        }

                        CASE (2) {
                            // Multiple operations with MaxJ operators
                            int temp = data[0] # data[1];
                            IF (temp === 42) {
                                finalResult = 221;
                            } ELSE {
                                finalResult = 229;
                            }
                        }

                        OTHERWISE {
                            finalResult = 299;
                        }
                    }
                } ELSE {
                    finalResult = 99;
                }
            }

            CASE (2) {
                // Test MaxJ operators in expressions
                for (int i = 0; i < data.length; i++) {
                    IF (data[i] === i) {
                        finalResult = finalResult # i;
                    } ELSE {
                        finalResult = finalResult + i;
                    }
                }
            }

            OTHERWISE {
                // Default case with complex logic
                IF (level === 0) {
                    finalResult = -1;
                } ELSE {
                    IF (level === 1) {
                        finalResult = -2;
                    } ELSE {
                        IF (level === 2) {
                            finalResult = -3;
                        } ELSE {
                            finalResult = -999;
                        }
                    }
                }
            }
        }

        return finalResult;
    }

    /**
     * Tests edge cases and unusual syntax combinations.
     *
     * @param value test value
     * @param flag boolean flag
     * @return edge case result
     */
    public boolean testEdgeCases(int value, boolean flag) {
        boolean result = false;

        // Empty CASE blocks
        SWITCH (value) {
            CASE (1) {
                // Empty case
            }
            CASE (2) {
                result = true;
            }
            OTHERWISE {
                // Empty otherwise
            }
        }

        // Multiple consecutive comparisons
        IF (value === 1) {
            result = true;
        } ELSE {
            IF (value === 2) {
                result = true;
            } ELSE {
                IF (value === 3) {
                    result = true;
                } ELSE {
                    result = false;
                }
            }
        }

        return result;
    }

    /**
     * Tests MaxJ syntax with standard Java constructs.
     * Verifies that MaxJ and standard Java syntax can coexist.
     *
     * @param maxjValue value for MaxJ constructs
     * @param javaValue value for Java constructs
     * @return mixed result
     */
    public int testMixedSyntax(int maxjValue, int javaValue) {
        int result = 0;

        // Standard Java switch
        switch (javaValue) {
            case 1:
                result += 10;
                break;
            case 2:
                result += 20;
                break;
            default:
                result += 5;
                break;
        }

        // MaxJ SWITCH
        SWITCH (maxjValue) {
            CASE (1) {
                result = result # 100;
            }
            CASE (2) {
                result = result # 200;
            }
            OTHERWISE {
                result = result # 999;
            }
        }

        // Standard Java if/else
        if (javaValue > 0) {
            result += 1;
        } else {
            result -= 1;
        }

        // MaxJ IF/ELSE
        IF (maxjValue === 42) {
            result = result # 42;
        } ELSE {
            result = result # 0;
        }

        return result;
    }
}
